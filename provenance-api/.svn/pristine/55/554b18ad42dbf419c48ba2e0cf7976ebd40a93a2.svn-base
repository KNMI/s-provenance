from pymongo import *
import json


class ProvenanceStore(object):

	def __init__(self, url):
 
		self.conection = MongoClient(host=url)
		self.db = self.conection["verce-prov"]
		self.collection = self.db['lineage']
		
	
	def getWorkflowInfo(self, id, start,limit):
		
		obj=None
		totalCount=None
		output=None
		
		if id=='allruns':
			obj = self.collection.distinct('runId')[start:start+limit]
			totalCount=len(self.collection.distinct('runId'))
			runids = list()
		
			for x in obj:
				runid={"runId":x}
				runids.append(runid)
			
			output = {"runIds":runids};
			output.update({"totalCount": totalCount})
	
		return  output
	
	
	 
	
	
	def getArtifactsBy(self,path,keylist,valuelist,start,limit,runid=None,iterationid=None,dataid=None):
		totalCount=0;
		cursorsList=list()
		obj=None
		i=0
		if path=="annotations":
			if runid!=None:
				for x in keylist:
					cursorsList.append(self.collection.find({'streams.annotations':{'$elemMatch':{'key': x,'val':{'$in':valuelist}}},'runId':runid},{"runId":1,"streams.annotations.$":1,'streams':1,'creationDate':1,"parameters":1,})[start:start+limit].sort("creationDate",direction=-1))
					totalCount = totalCount + self.collection.find({'streams.annotations':{'$elemMatch':{'key': x,'val':{'$in':valuelist}}},'runId':runid},).count()
			else:
				for x in keylist:
					cursorsList.append(self.collection.find({'streams.annotations':{'$elemMatch':{'key': x,'val':{'$in':valuelist}}}},{"runId":1,"streams.annotations.$":1,'streams':1,'creationDate':1,"parameters":1})[start:start+limit].sort("creationDate",direction=-1))
					totalCount = totalCount + self.collection.find({'streams.annotations':{'$elemMatch':{'key': x,'val':{'$in':valuelist}}}},).count()
		
		if path=="generatedby":
			cursorsList.append(self.collection.find({'_id':iterationid},{"runId":1,"streams":1,"parameters":1,'creationDate':1}))
			totalCount = totalCount + self.collection.find({'_id':iterationid},{"streams":1,"parameters":1,'creationDate':1}).count()
		
					
		if path=="run":		
			cursorsList.append(self.collection.find({'runId':runid,'streams.id':dataid},{"runId":1,"streams":1,"parameters":1,'creationDate':1}))
			totalCount = totalCount + self.collection.find({'runId':runid,'streams.id':dataid}).count()
		
		
		artifacts = list()

		for cursor in cursorsList:
			for x in cursor:
				totalCount=totalCount-len(x["streams"])
				for s in x["streams"]:
					totalCount=totalCount+1
					s["wasGeneratedBy"]=x["_id"]
			 		s["parameters"]=x["parameters"]
			 		s["runId"]=x["runId"]
					artifacts.append(s)
					
		
				
		output = {"artifacts":artifacts};
		output.update({"totalCount": totalCount})
		return  output
 		
	def getRun(self, id,start,limit):
		obj = self.collection.find({'runId':id},{"instanceId":1,"parameters":1,"creationDate":-1,"error":1,"iterationIndex":1})[start:start+limit].sort("creationDate",direction=-1)
		totalCount=self.collection.find({'runId':id},{"instanceId":1,"parameters":1,"creationDate":-1,"error":1,"iterationIndex":1}).count()
		activities = list()
		
		for x in obj:
			activities.append(x)
		output = {"activities":activities};
		output.update({"totalCount": totalCount})
		return  output
	 
	
	
	
	
	def getTrace(self, id,level):
		
		xx = self.collection.find_one({"streams.id":id},{"runId":1,"derivationIds":1});
		streams=list()
		 
		xx.update({"id":id})
		if level>=0:
			for derid in xx["derivationIds"]:
				try:
					derid["wasDerivedFrom"] = self.getTrace(derid["DerivedFromDatasetID"],level-1)
				except Exception, err:
					None
			return xx