from pymongo import *
import json


class ProvenanceStore(object):

	def __init__(self, url):
 
		self.conection = MongoClient(host=url)
		self.db = self.conection["verce-prov"]
		self.collection = self.db['lineage']
		
	
	def getWorkflowInfo(self, id, start,limit):
		
		obj=None
		totalCount=None
		output=None
		
		if id=='allruns':
			obj = self.collection.distinct('runId')[start:start+limit]
			totalCount=len(self.collection.distinct('runId'))
			runids = list()
		
			for x in obj:
				runid={"runId":x}
				runids.append(runid)
			
			output = {"runIds":runids};
			output.update({"totalCount": totalCount})
	
		return  output
	
	
	def getStreamChunk(self,runid,id):
		obj = self.collection.find_one({'runId':runid,'streams.id':id},{"runId":1,"streams":1,"parameters":1})
		
		totalCount=len(obj["streams"])
		artifacts = list()
		 
		
		for x in obj["streams"]:
			if x["id"]==id:
				
				x["parameters"]=obj["parameters"]
				x["wasGeneratedBy"]=obj["_id"]
				artifacts.append(x)
			
			
		output = {"artifacts":artifacts};
		 
		return  output
 		
	def getRun(self, id,start,limit):
		obj = self.collection.find({'runId':id},{"instanceId":1,"parameters":1,"creationDate":-1,"error":1,"iterationIndex":1})[start:start+limit].sort("creationDate",direction=-1)
		totalCount=self.collection.find({'runId':id},{"instanceId":1,"parameters":1,"creationDate":-1,"error":1,"iterationIndex":1}).count()
		activities = list()
		
		for x in obj:
			activities.append(x)
		output = {"activities":activities};
		output.update({"totalCount": totalCount})
		return  output
	
	def getActivityProducts(self, id,start,limit):
		obj = self.collection.find_one({'_id':id},{"streams":1,"parameters":1})
		
		totalCount=len(obj["streams"])
		artifacts = list()
		print
		
		for x in obj["streams"]:
			x["parameters"]=obj["parameters"]
			x["wasGeneratedBy"]=obj["_id"]
			artifacts.append(x)
			
		output = {"artifacts":artifacts};
		output.update({"totalCount": totalCount})
		return  output
	
	
	
	
	def getTrace(self, id,level):
		
		xx = self.collection.find_one({"streams.id":id},{"runId":1,"derivationIds":1});
		streams=list()
		 
		xx.update({"id":id})
		if level>=0:
			for derid in xx["derivationIds"]:
				try:
					derid["wasDerivedFrom"] = self.getTrace(derid["DerivedFromDatasetID"],level-1)
				except Exception, err:
					None
			return xx